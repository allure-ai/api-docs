openapi: 3.0.0
servers:
  - description: Allure AI Business API
    url: https://apibusiness.allure.id/v1
info:
  description: This is an API to utilize Allure AI inference engine
  version: "v1"
  title: Allure AI Business API
  contact:
    email: admin@allure.id
paths:
  /facial-check/v1/predict:
    post:
      tags:
        - Face API
      summary: calculates facial check score asynchronously
      operationId: scoreFacialCheck
      description: Calculates Facial Check scores depending on the requested components, and calls a webhook to post the result when it is done.
      responses:
        '201': 
          description: Scoring job created
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/FacialCheckRequest'
                - type: object
                  required: 
                    - callback_url
                  properties:
                    callback_url:
                      type: string
                      format: uri
                      example: "https://some-backend-server.example.com/facial-check-webhook"
      callbacks:
        scoringSuccessful:
          '{$request.body#/callback_url}':
            post:
              description: "Facial check scoring job successful"
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/FacialCheckSuccessResponse'
              responses:
                '200': 
                  description: "Your callback returns HTTP 200"
        scoringFailed:
          '{$request.body#/callback_url}':
            post:
              description: "Facial check scoring job failed"
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/FacialCheckErrorResponse'
              responses:
                '200': 
                  description: "Your callback returns HTTP 200"
          
          
  # /face/score/sync:
  #   post:
  #     tags:
  #       - Face API
  #     summary: calculates facial check score synchronously
  #     operationId: scoreFacialCheckSync
  #     description: Calculates Facial Check scores depending on the requested components
  #     responses:
  #       '200':
  #         description: scoring completed
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/FacialCheckSuccessResponse'
  #       '400':
  #         description: photo quality is insufficient
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/FacialCheckErrorResponse'
  #       '403':
  #         description: 'client is forbidden to access this API or requested components'
  #       '500':
  #         description: internal server error
  #     requestBody:
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/FacialCheckRequest'
  #       description: Facial check request
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header 
      name: X-API-Key
  schemas:
    FacialCheckRequest:
      type: object
      required:
        - photo_url
        - components
      properties:
        photo_url:
          type: string
          format: url
          example: "http://cdn.allure.id/example/photo.png"
        visualization_enabled:
          type: boolean
          default: false
          example: true
        components:
          type: array
          example: ["wrinkle", "acne"]
          items:
            type: string
            enum:
              - dark_circle
              - darkspot
              - acne
              - wrinkle
              - redness
              - oiliness
              # - face_shape
              # - undertone
              # - foundation
              # - texture_area
    FacialCheckSuccessResponse:
      type: object
      required: 
        - success
      properties:
        success:
          type: boolean
          default: true
        prediction:
          type: object
          properties:
            acne:
              $ref: '#/components/schemas/FacialCheckAcneComponent'
            wrinkle:
              $ref: '#/components/schemas/FacialCheckWrinkleComponent'
            darkspot:
              $ref: '#/components/schemas/FacialCheckDarkspotComponent'
            dark_circle:
              $ref: '#/components/schemas/FacialCheckDarkCircleComponent'
            redness:
              $ref: '#/components/schemas/FacialCheckRednessComponent'
            oiliness:
              $ref: '#/components/schemas/FacialCheckOilinessComponent'
            # face_shape:
            #   $ref: '#/components/schemas/FacialCheckFaceShapeComponent'
            # undertone:
            #   $ref: '#/components/schemas/FacialCheckUndertoneComponent'
            # foundation:
            #   $ref: '#/components/schemas/FacialCheckFoundationComponent'
            # texture_area:
            #   $ref: '#/components/schemas/FacialCheckTextureAreaComponent'
    FacialCheckErrorResponse:
      type: object
      required: 
        - success
      properties:
        success:
          type: boolean
          default: false
        error:
          type: string
          enum:
            - FACE_NOT_FOUND
            - PHOTO_BLURRY
            - PHOTO_NOISY
            - SUBJECT_NOT_FACING_CAMERA
            - PHOTO_TOO_BRIGHT
            - PHOTO_TOO_DARK
            - SUBJECT_TOO_FAR
            - FACE_PARTIALLY_SHOWN
            - UNKNOWN_ERROR
        description:
          type: string
          nullable: true
    FacialCheckAcneComponent: &numericComponent
      type: object
      required: 
        - score
      properties:
        score:
          type: integer
        overlay: &overlayProperty
          type: object
          description: "Visualization overlay, only exists if visualization_enabled is true"
          properties:
            image_b64:
              type: string
              format: byte
            image_type:
              type: string
              description: "MIME type of the overlay, typically image/png"
    FacialCheckWrinkleComponent: *numericComponent
    FacialCheckDarkspotComponent: *numericComponent
    FacialCheckDarkCircleComponent: *numericComponent
    FacialCheckRednessComponent: *numericComponent
    FacialCheckOilinessComponent: *numericComponent
    FacialCheckFaceShapeComponent:
      type: object
      required: 
        - class
      properties:
        class:
          type: string
          enum: 
            - "HEART"
            - "OBLONG"
            - "OVAL"
            - "ROUND"
            - "SQUARE"
    FacialCheckUndertoneComponent:
      type: object
      required: 
        - class
      properties:
        class:
          type: string
          enum: 
            - "ace:undertone:cold"
            - "ace:undertone:neutral"
            - "ace:undertone:warm"
    FacialCheckFoundationComponent:
      type: object
      required: 
        - class
      properties:
        class:
          type: string
          enum: 
            - "ace:foundation:1"
            - "ace:foundation:2"
            - "ace:foundation:3"
            - "ace:foundation:4"
            - "ace:foundation:5"
            - "ace:foundation:6"
            - "ace:foundation:7"
            - "ace:foundation:8"
            - "ace:foundation:9"
            - "ace:foundation:10"
            - "ace:foundation:11"
            - "ace:foundation:12"
    FacialCheckTextureAreaComponent:
      type: object
      required:
        - overlay
      properties:
        overlay: *overlayProperty
        
security:
  - ApiKeyAuth: []
tags:
  - name: Face API
